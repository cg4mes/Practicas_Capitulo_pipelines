name: Download popular images from nasa

on: 
  push:
    branches:
      - main

jobs:
  read-json:
    name: Reading json file and building parallels
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read json file
        id: readjson
        uses: antifree/json-to-variables@v1.2.0
        with:
          filename: 'dates.json'
          prefix: 'dates'

      - name: Set matrix for jobs
        id: set_matrix
        run: |
          vars=($(env | grep '^dates_dates_' | awk -F'=' '{print $2}'))
          matrix_json=$(echo "[\"$(echo ${vars[*]} | sed 's/ /\", \"/g')\"]")
          echo "matrix=$matrix_json" >> "$GITHUB_OUTPUT"

  process-images:
    name: Image processing
    runs-on: ubuntu-latest
    needs: read-json
    strategy:
      matrix:
        dates: ${{ fromJson(needs.read-json.outputs.matrix) }}

    steps:
      - name: Execute GET request
        id: fetch_image
        if: ${{ steps.cache-response.outputs.cache-hit != 'true' }}
        run: |
          set -e
          response=$(curl -s -X GET "https://api.nasa.gov/planetary/apod?api_key=${{ secrets.API_KEY }}&date=${{ matrix.dates }}")
          if echo "$response" | jq -e '.code' > /dev/null; then
            msg=$(echo "$response" | jq -r '.msg')
            echo "Error in query: $msg" >&2
            exit 1
          fi
          echo "response=$response" >> $GITHUB_ENV
          image_url=$(echo "$response" | jq -r '.url')
          echo "image_url=$image_url" >> $GITHUB_ENV
          extension="${image_url##*.}"
          if [ -z "$extension" ] || ! [[ "$extension" =~ ^(jpg|jpeg|png|gif)$ ]]; then
            echo "Error: The URL does not have a valid extension or is an unsupported type" >&2
            exit 1
          fi
          echo "image_extension=$extension" >> $GITHUB_ENV

      - name: Download response
        if: ${{ steps.cache-response.outputs.cache-hit != 'true' }}
        uses: devops-actions/json-to-file@v1.0.0
        with:
          json: ${{ env.response }}
          filename: 'response-${{ matrix.dates }}.json'    
          
      - name: Evaluate response cache
        id: cache-response
        uses: actions/cache@v4
        env:
          cache-name: cache-response
        with:
          path: response-${{ matrix.dates }}.json
          key: cache-response-${{ matrix.dates }} 

      - name: Extract url from json
        if: ${{ steps.cache-response.outputs.cache-hit == 'true' }}
        run: |
          image_url=$(jq -r '.url' response-${{ matrix.dates }}.json)
          echo "image_url=$image_url" >> $GITHUB_ENV

      - name: Download image from url
        uses: minituff/save-image@v1.4
        with:
          url: ${{ env.image_url }}
          imagePath: 'img-${{ matrix.dates }}.${{ env.image_extension }}'

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: img-${{ matrix.dates }}
          path: img-${{ matrix.dates }}.*
          retention-days: 1